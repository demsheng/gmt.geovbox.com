'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/install_gmt/','title':"GMT安装配置",'section':"Docs",'content':"GMT安装配置(Windows系统) I. 安装 GMT   下载 GMT 64 位安装包：gmt-6.4.0-win64.exe\n  安装 GMT\n双击安装包即可安装。在 “Choose components” 页面应勾选全部选项。\n  测试安装\n安装完成后，点击“开始”→“所有程序”→“附件”→“命令提示符”以启动 CMD。 在 CMD 窗口中敲入 gmt --version，若出现 GMT 版本号则表示 GMT 安装成功。\n  II. 安装Bash脚本工具 Git for Windows 下载地址： https://git-scm.com/download/win/\nGit for Windows 为 Windows 用户提供了 Bash 以及 Linux 的常用命令，方便用户在 Windows 下运行 Bash 脚本。\nIII. 错误解决办法  安装过程中出现错误参考:: https://docs.gmt-china.org/6.4/install/windows/ 如果 GMT 和 git 无法下载，可在百度网下载  链接： https://pan.baidu.com/s/1x7ev4zYLIdf9mDWWaaKY4Q?pwd=zdem 提取码：zdem     "});index.add({'id':1,'href':'/docs/gmt_first/','title':"绘制第一张图",'section':"Docs",'content':"绘制第一张图   启动bash，运行GMT\n进入工作目录 G:\\MyProgram\\gmt\\1 ，右键 Git Bash Here , 进入 bash 输入 git ， 你将看到 GMT 的欢迎界面信息，类似于：\nsheng@cslaptop MINGW64 /g/MyProgram/gmt/1 $ git usage: git [-v | --version] [-h | --help] [-C \u0026lt;path\u0026gt;] [-c \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;] [--exec-path[=\u0026lt;path\u0026gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=\u0026lt;path\u0026gt;] [--work-tree=\u0026lt;path\u0026gt;] [--namespace=\u0026lt;name\u0026gt;] [--super-prefix=\u0026lt;path\u0026gt;] [--config-env=\u0026lt;name\u0026gt;=\u0026lt;envvar\u0026gt;] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help \u0026lt;command\u0026gt;' or 'git help \u0026lt;concept\u0026gt;' to read about a specific subcommand or concept. See 'git help git' for an overview of the system. sheng@cslaptop MINGW64 /g/MyProgram/gmt/1 $   生成脚本模板 继续在bash中敲入:\ngmt --new-script \u0026gt; myplot.sh 该命令会在当前目录生成一个 GMT 模板脚本，并保存到 Bash 脚本文件 myplot.sh 中。\n  查看并编辑脚本文件 Bash 脚本文件是一个纯文本文件，可以直接用文本编辑器打开。 采用 Notepad++ 双击打开 myplot.sh 后会看到如下内容:\n#!/usr/bin/env bash # GMT modern mode bash template # Date: 2019-09-10T00:44:39 # User: seisman # Purpose: Purpose of this script export GMT_SESSION_NAME=$$ # Set a unique session name gmt begin figurename # Place modern session commands here gmt end show 其中，以 # 开头的行尾注释行，export GMT_SESSION_NAME=$$ 这一行属于高级用法，可以忽略。因而核心内容只有两行，即 gmt begin 和 gmt end 这两行。 编辑脚本，在 gmt begin 和 gmt end 中间添加 GMT 命令，将脚本修改如下:\n#!/usr/bin/env bash # GMT modern mode bash template # Date: 2019-09-10T00:44:39 # User: seisman # Purpose: Purpose of this script export GMT_SESSION_NAME=$$ # Set a unique session name gmt begin figurename gmt coast -Rg -JH15c -Gpurple -Baf -B+t\u0026quot;My First Plot\u0026quot; gmt end show 编辑完成后记得保存文件。\n  执行脚本以绘图\n回到bash，运行 Bash 脚本:\nbash myplot.sh 待脚本执行完成后，工作目录 G:\\MyProgram\\gmt\\1 中将生成 PDF 格式的图片文件，双击打开将看到如下图所示的图片。\n  以上就是运行 GMT 脚本的基本流程，即：\n 生成脚本模板 编辑脚本，添加 GMT 绘图命令 运行脚本并查看绘图效果   参考: https://docs.gmt-china.org/6.4/tutorial/get-started/linux/   GMT 命令初探 GMT 在绘图时，总是以 begin 开始，并以 end 结束。所有的绘图命令都放在 begin 与 end 之间，而非绘图命令可以放在任何地方。\n在前一节中我们使用 gmt --new-script \u0026gt; myplot.sh 命令生成一个绘图模板。忽略掉绘图模板中的注释语句，一个最最基本的 GMT 绘图脚本的模板是:\ngmt begin # # 其它命令，包括 GMT 绘图命令、数据处理命令以及其它 UNIX 命令 # gmt end show 绘图时我们通常需要指定图片文件名和图片格式，因而更实用的绘图脚本模板为:\ngmt begin FigureName pdf # # 其它命令，包括 GMT 绘图命令、数据处理命令以及其它 UNIX 命令 # gmt end show  FigureName 指定了要生成的图片文件名，你可以指定任意文件名，但最好避免在文件名中使用特殊符号和空格。若不给定文件名，则默认文件名为 gmtsession 紧跟在图片文件名后的 pdf 指定了要生成的图片格式（若不指定格式，则默认图片格式为 PDF）。GMT 支持多种图片格式，pdf、ps、eps、jpg、png、bmp 等等。若想要一次性生成多种格式的图片，则可以使用逗号将多种格式连接起来，如 pdf,png 会同时生成 PDF 和 PNG 格式的图片 gmt end 后面加上 show，则 GMT 会在绘图完成后，使用系统自带的阅读器软件自动打开生成的图片文件，供用户预览绘图效果  输出pdf和png格式图片 在 GMT 绘图脚本模板的基础上，向 begin 和 end 语句中间加入正确的 GMT 绘图命令，即可实现用 GMT 绘图。\n下面的脚本使用 coast 绘制了一张全球地图。执行该脚本，会生成文件名为 GlobalMap、格式为 PNG 和 PDF 的图片文件，并且 GMT 会在绘图结束后自动打开生成的图片文件。\ngmt begin GlobalMap pdf,png gmt coast -Rg -JH15c -Gpurple -Baf -B+t\u0026quot;My First Plot\u0026quot; gmt end show GMT 命令格式 一个 GMT 命令通常由 gmt + 模块名 + 选项 + 参数 构成。比如上面的例子中:\ngmt coast -Rg -JH15c -Gpurple -Baf -B+t\u0026quot;My First Plot\u0026quot;  所有的 GMT 命令都需要以 gmt 开头 coast 是模块名，这个模块可以用于绘制海岸线 -R、-J、-G、-B\\ 等以 - 开头的是模块的选项 -Baf 中 af 是 -B 选项的参数 -B+t\\ \u0026ldquo;My First Plot\u0026rdquo; 中 +t 为 -B 的 子选项，\u0026ldquo;My First Plot\u0026rdquo; 则是子选项 +t 的参数  关于 GMT 命令的几点说明：\n 若模块名以 gmt 开头，则模块名中的 gmt 可省略。 比如 gmt gmtset xxx xxx 可简写为 gmt set xxx xxx 模块名、选项等均区分大小写 选项以 - 开头，后接\\ 单个字符\\ 表示某个选项，字符后接选项的参数以及子选项 子选项以 + 开头，后接\\ 单个字符\\ 以及子选项的参数 不以 - 开头的参数，通常都会被当做文件，GMT 会尝试去读取 各选项间以空格分隔，选项内部不能有空格。选项内部的字符串中若存在空格， 在 Bash 下可以使用单引号或双引号括起来。   参考: https://docs.gmt-china.org/6.4/tutorial/commands   "});index.add({'id':2,'href':'/docs/gmt_bash/','title':"Bash 编程基础",'section':"Docs",'content':"Bash 编程基础 本手册中的所有示例及代码都使用 Bash 脚本实现，要求读者对 Bash 脚本语言有最基本的了解。\n用文本编辑器创建一个后缀名为 .sh 的文件，向其中写入 Bash 命令并保存，即得到一个 Bash 脚本。\n打开终端，在终端中输入 bash script.sh\\，即可执行 Bash 脚本 :file:script.sh。 也可以执行命令 chmod +x script.sh 给脚本可执行权限，然后即可在终端输入 ./script.sh\\ 运行 “可执行” 的脚本。\n下面的 Bash 脚本展示并解释了 Bash 中常用的语法：\n#!/usr/bin/env bash # 脚本的第一行叫 shebang，用来告知系统如何执行该脚本: # 参见： http://en.wikipedia.org/wiki/Shebang_(Unix) # 以 # 开头的行是注释行，在脚本执行时会被忽略 # echo 命令用于显示后面的字符 echo Hello world! # 声明一个变量 # 注意：= 两边不能有空格！ projection=\u0026quot;X10c/10c\u0026quot; region=\u0026quot;0/10/0/10\u0026quot; # 在变量名前加上 $ 符号即可引用该变量的值 echo $projection $region # 执行 GMT 命令 gmt begin map gmt basemap -J$projection -R$region -Baf # 输入数据 # 有些命令需要读入数据。Bash 中有多种方法可以将数据传递给一个命令： # 1. 将数据保存到文件中，并在命令中指定数据文件名 # 下面的命令会读取文件 input.dat 中的数据 gmt plot input.dat -W1p # 2. 通过管道符号 | 将前一个命令的输出作为后一个命令的输入 # 下面的命令中，echo 命令输出了 5 5，该输出通过管道被传递给了 GMT 命令作为输入 echo 5 5 | gmt plot -Sc0.5c # 3. 使用 heredoc 将两个 EOF 之间的数据传给命令 # 下面的命令中，\u0026lt;\u0026lt; EOF 表示将接下来到 EOF 为止的内容传递给命令 gmt plot -Sc0.5c \u0026lt;\u0026lt; EOF 1 2 3 4 5 6 EOF # 输出数据 # 很多命令都会输出一些数据或信息。默认情况下，输出会在终端显示。为了将数据保存到文件中，需要使用重定向符号。 # 常用的重定向符号主要有两个： \u0026gt; 和 \u0026gt;\u0026gt; # \u0026gt; 表示将数据输出到文件中。若文件不存在，则创建该文件；若文件已存在，则覆盖该文件的原内容； # \u0026gt;\u0026gt; 表示将数据追加到文件中。若文件不存在，则创建该文件；若文件已存在，则将数据追加到原内容的后面； echo 1 3 Point1 \u0026gt; tmp.txt echo 2 5 Point2 \u0026gt;\u0026gt; tmp.txt echo 4 2 Point3 \u0026gt;\u0026gt; tmp.txt # 此时文件中有三行内容 # 倒引号 # 倒引号的作用是将一个命令的输出保存到一个变量中，供后面的命令使用 # 下面将 gmt info 的输出保存到变量 new_region 中，并在接下来的命令中使用了该变量的值 new_region=`gmt info input.dat -I1/1` gmt plot input.dat -J$projection $new_region # 长命令续行符 # 当一个命令较长时，可以将命令拆分为多行，每行行末用续行符 \\ 表示下一行命令 # 需要接在当前命令的后面 gmt coast -A1000 -Dc -ECN -W1/1p \\ -Glightblue -Slightred gmt end show # rm 命令删除文件 rm tmp.txt Bash 脚本本身功能有限，因而经常需要与 Linux 下的命令结合在一起使用。\n可在如下网站自行学习： 《地震“学”科研入门教程：Linux 常用命令》 \n"});index.add({'id':3,'href':'/docs/gmt_coast/','title':"coast绘制海岸线",'section':"Docs",'content':"coast绘制海岸线 执行以下脚本： ./coasttest.sh\n#!/usr/bin/env bash # GMT modern mode bash template # Date: 2019-09-10T00:44:39 # User: seisman # Purpose: Purpose of this script export GMT_SESSION_NAME=$$ # Set a unique session name gmt begin coasttest png,pdf gmt coast -JM10c -R-130/130/-50/50 -Ba40f20 -W0.1p,red -A2000 -Cblue -Ggreen -Slightblue #参数解释如下： #-JM10c 意思是用墨卡托投影画10cm宽度的图 #-Rg-R-130/130/-50/50 意思是画图范围是经度-130到130，纬度-50到50 #-Ba40f20 意思是以40度为标注间隔，20度为刻度间隔，绘制坐标轴 gmt end show 待脚本执行完成后，工作目录中将生成 png 格式的图片文件，双击打开将看到如下图所示的图片。\n 参考: https://docs.gmt-china.org/6.4/module/coast/   "});index.add({'id':4,'href':'/docs/gmt_plot/','title':"plot画符号",'section':"Docs",'content':"plot画符号 要绘制符号，必须要有符号的经纬度坐标。\n以下面坐标点为例 :\n   经度 纬度    104.39 29.90 13.14 52.50 19.99 -34.52 -77.15 38.89 -52.47 -31.62 150.36 -33.79 76.22 -69.22 下面的例子中，我们首先使用 UNIX 下的 cat 命令将数据写入到文件 stations.txt 中，然后使用 coast 模块绘制了一张底图，并使用 plot 模块绘制输入文件 stations.txt 中的数据。\n下面的几行代码的作用是将两个 EOF 中间的三行数据保存到文件 stations.txt 中:\ncat \u0026gt; stations.txt \u0026lt;\u0026lt; EOF 104.39 29.90 13.14 52.50 19.99 -34.52 -77.15 38.89 -52.47 -31.62 150.36 -33.79 76.22 -69.22 EOF 下面的脚本中，采用 plot 模块绘制 stations.txt 给出的坐标点，并给 plot 添加了 -St0.5c 选项，绘制三角形符号，外接圆直径为0.5c，G` 设置符号的填充色为red\ngmt begin figure1 png,pdf gmt coast -JH15c -Rg -Baf -W0.1p -Cblue -Ggreen -Slightblue gmt plot -St0.5c stations.txt -Gred gmt end show 可以采用plot继续绘制坐标点：\ncat \u0026gt; epicenter.txt \u0026lt;\u0026lt; EOF 130.72 32.78 EOF gmt begin figure1 png,pdf gmt coast -JH15c -Rg -Baf -W0.1p -Cblue -Ggreen -Slightblue gmt plot -St0.5c stations.txt -Gred gmt plot -Sa0.5c epicenter.txt -Gyellow -W1p,black gmt end show 完整的绘图脚本如下:\n#!/usr/bin/env bash # GMT modern mode bash template # Date: 2019-09-10T00:44:39 # User: seisman # Purpose: Purpose of this script export GMT_SESSION_NAME=$$ # Set a unique session name cat \u0026gt; stations.txt \u0026lt;\u0026lt; EOF 104.39 29.90 13.14 52.50 19.99 -34.52 -77.15 38.89 -52.47 -31.62 150.36 -33.79 76.22 -69.22 EOF cat \u0026gt; epicenter.txt \u0026lt;\u0026lt; EOF 130.72 32.78 EOF gmt begin figure1 png,pdf gmt coast -JH15c -Rg -Baf -W0.1p -Cblue -Ggreen -Slightblue gmt plot -St0.5c stations.txt -Gred gmt plot -Sa0.5c epicenter.txt -Gyellow -W1p,black gmt end show  -S 选项相对复杂，与不同的选项连用，或者后面接不同的参数，所需要的输入数据的格式也不同。不管是什么符号，至少都需要给定符号的位置，即X和Y是必须的:  X Y  参考: https://docs.gmt-china.org/6.4/module/plot/   "});index.add({'id':5,'href':'/docs/gmt_grdimage/','title':"grdimage绘制全球地形起伏数据",'section':"Docs",'content':"grdimage绘制全球地形起伏数据 earth_relief: 全球地形起伏数据\n数据简介 earth_relief 数据是 GMT 提供的全球地形起伏数据，其包含了全球陆地和洋底的高程数据。原始数据来源于公开数据，GMT 经过了一些预处理，提供了不同分辨率和不同配准方式的网格数据，以满足用户的不同需求。earth_relief 数据默认使用 GMT 内置 CPT 文件 geo。\nGMT数据服务器目前在全球范围内有多个镜像。详细的镜像列表见 https://www.generic-mapping-tools.org/mirrors 页面。 对于国内用户，建议直接使用中科大LUG提供的国内镜像。修改方式为:\ngmt set GMT_DATA_SERVER https://mirrors.ustc.edu.cn/gmtdata 完整的绘图脚本 如下:\n#!/usr/bin/env bash # GMT modern mode bash template # Date: 2019-09-10T00:44:39 # User: seisman # Purpose: Purpose of this script export GMT_SESSION_NAME=$$ # Set a unique session name gmt begin grdimage png gmt grdimage @earth_relief_04m -JM10c -R-100/100/-60/60 -Ba60f30g10 -B+t\u0026quot;PB2002\u0026quot; -Cgeo gmt coast -W1/1p,black -A1000 gmt plot PB2002_boundaries.dig.txt -W0.5p,red gmt end show  参考: https://docs.gmt-china.org/6.4/module/grdimage/   "});})();